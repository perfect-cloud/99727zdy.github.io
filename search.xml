<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>路由懒加载，嵌套路由和传递参数</title>
      <link href="/2020/05/05/lu-you-lan-jia-zai-qian-tao-lu-you-he-chuan-di-can-shu/"/>
      <url>/2020/05/05/lu-you-lan-jia-zai-qian-tao-lu-you-he-chuan-di-can-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>通过这个方式，在页面下显示id（是一个符号，自定义可改名）消息<br><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a01978aa78c07?w=375&h=209&f=png&s=9633" alt=""><br>此时的路由配置如图<br><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a01a364070afc?w=367&h=166&f=png&s=6248" alt=""></p><h3 id="这个函数功能强大，用来打包js文件"><a href="#这个函数功能强大，用来打包js文件" class="headerlink" title="这个函数功能强大，用来打包js文件"></a>这个函数功能强大，用来打包js文件</h3><p>在bould.js（webpack配置情况）和index.js(vue自动配置情况)里大量应用这个函数<br><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a02b43879f3ec?w=764&h=148&f=png&s=155861" alt=""></p><p>一开始时js文件夹下有这几个文件  分别表示</p><ul><li>业务代码  底层支持   提供商（第三方）<br><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a02f52700387e?w=963&h=256&f=png&s=366536" alt=""><h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a03cb7ffea8cb?w=485&h=148&f=png&s=6171" alt=""></li></ul><p>路由懒加载后后多了三个文件（因为的我加了3个路由子件）<br><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a03d5cb65b220?w=353&h=180&f=png&s=14544" alt=""></p><h3 id="怎么嵌套路由（创建子路由）"><a href="#怎么嵌套路由（创建子路由）" class="headerlink" title="怎么嵌套路由（创建子路由）"></a>怎么嵌套路由（创建子路由）</h3><ul><li><p>第一步<br><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a10eb1c6b221e?w=320&h=216&f=png&s=13336" alt=""></p></li><li><p>第二步 配置路由映射关系</p></li></ul><p><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a096eb094c900?w=553&h=338&f=png&s=16044" alt=""></p><ul><li>第三步 配置连接<br><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a09622e69ad73?w=622&h=312&f=png&s=28239" alt=""></li></ul><p>url格式</p><p><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a0ad21eeb280e?w=764&h=160&f=png&s=88909" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a0ad9ad49f829?w=388&h=76&f=png&s=37648" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a0abbf44ece42?w=779&h=147&f=png&s=98922" alt=""></p><h3 id="传递参数的方式"><a href="#传递参数的方式" class="headerlink" title="传递参数的方式"></a>传递参数的方式</h3><p>query方式  query是个对象<br><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a0b596921805f?w=664&h=40&f=png&s=5275" alt=""></p><p>路由映射配置这样写<br><img src="https://user-gold-cdn.xitu.io/2020/4/22/171a0c00899982a2?w=372&h=131&f=png&s=5555" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> router </category>
          
      </categories>
      
      
        <tags>
            
            <tag> router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Word</title>
      <link href="/2020/05/05/hello-world/"/>
      <url>/2020/05/05/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 官方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nothing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是我的第一篇博客</title>
      <link href="/2020/05/05/wo-de-di-yi-pian-wen-zhang/"/>
      <url>/2020/05/05/wo-de-di-yi-pian-wen-zhang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>promise基础</title>
      <link href="/2020/05/05/promise-ji-chu/"/>
      <url>/2020/05/05/promise-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>promise是异步编程的一种解决方案，解决回调地狱<br><img src="https://user-gold-cdn.xitu.io/2020/4/24/171ab1623b70b225?w=538&h=502&f=png&s=105611" alt=""><br>下面简单举个例子：定时器异步事件</p><p>运用promise链式调用（链式编程的思想）</p><pre><code>  // 什么情况下会用到Promise?  // 一般情况下是有异步操作时,使用Promise对这个异步操作进行封装  // new -&gt; 构造函数(1.保存了一些状态信息  2.执行传入的函数)  // 在执行传入的回调函数时, 会传入两个参数, resolve, reject.本身又是函数  new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {      // 成功的时候调用resolve      // resolve(&#39;Hello World&#39;)      // 失败的时候调用reject      reject(&#39;error message&#39;)    }, 1000)  }).then((data) =&gt; {    // 1.100行的处理代码    console.log(data);  }).catch((err) =&gt; {    console.log(err);  })</code></pre><p>另外一种写法，我们可以看到其实就是箭头函数只有一个参数时括号可以省略哈哈~~</p><pre><code> new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {      // resolve(&#39;Hello Vuejs&#39;)      reject(&#39;error message&#39;)    }, 1000)  }).then(data =&gt; {    console.log(data);  }, err =&gt; {    console.log(err);  })</code></pre><hr><p>下面这三种写法意思一样，但是最后一种最简洁</p><p>reject同理，也可以简写，只不过遇到reject的时候跳到.catch()</p><pre><code>.then(res =&gt; {     console.log(res, &#39;第二层的10行处理代码&#39;);     return new Promise(resolve =&gt; {       resolve(res + &#39;222&#39;)     })   })</code></pre><pre><code>.then(res =&gt; {    console.log(res, &#39;第二层的10行处理代码&#39;);    return Promise.resolve(res + &#39;222&#39;)  })</code></pre><p>它内部会对res+’222’进行一个promise的包装，把它放在resolve里面</p><pre><code>.then(res =&gt; {    console.log(res, &#39;第二层的10行处理代码&#39;);    return res + &#39;222&#39;  })</code></pre><p>还有一种方式，可以不用reject，直接手动抛出异常，如下图<br><img src="https://user-gold-cdn.xitu.io/2020/4/24/171ab77b774ed2a6?w=385&h=129&f=png&s=61488" alt=""></p><p>promise的all方法（resove里面可以是数组，字符串，对象）</p><pre><code>Promise.all([    new Promise((resolve, reject) =&gt; {      setTimeout(() =&gt; {        resolve({name: &#39;why&#39;, age: 18})      }, 2000)    }),    new Promise((resolve, reject) =&gt; {      setTimeout(() =&gt; {        resolve({name: &#39;kobe&#39;, age: 19})      }, 1000)    })  ]).then(results =&gt; {    console.log(results);  })</code></pre>]]></content>
      
      
      <categories>
          
          <category> promise </category>
          
      </categories>
      
      
        <tags>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
